import { render, screen, fireEvent } from '@testing-library/vue';
import TaskList from '@/views/tasks/TaskList.vue'; // –ó–∞–º–µ–Ω–∏ –Ω–∞ –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
import { vi } from 'vitest';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â Pinia
vi.mock('@/store/task/taskStore.ts', () => ({
    useTaskStore: () => ({
        fetchTasks: vi.fn(),
        deleteTask: vi.fn(),
        editTask: vi.fn(),
        tasksList: [{ id: '1', name: 'Test Task', text: 'Description', employee: 'User 1', status: 'In Progress', edit: false }],
        statusList: ['In Progress', 'Completed'],
    }),
}));

vi.mock('@/store/users/usersStore.ts', () => ({
    useUsersStore: () => ({
        userList: [{ id: '1', name: 'User 1' }],
    }),
}));

vi.mock('@/store/auth/authStore.ts', () => ({
    useAuthStore: () => ({
        currentUser: { value: { id: '1', role: 'admin' } },
    }),
}));

describe('TaskList.vue', () => {
    it('–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', async () => {
        render(TaskList);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏
        expect(screen.getByText('Test Task')).toBeInTheDocument();
        expect(screen.getByText('Description')).toBeInTheDocument();
        expect(screen.getByText('User 1')).toBeInTheDocument();
        expect(screen.getByText('In Progress')).toBeInTheDocument();
    });

    it('–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', async () => {
        const { deleteTask } = require('@/store/task/taskStore.ts').useTaskStore();

        render(TaskList);

        const deleteButton = screen.getByText('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å');
        await fireEvent.click(deleteButton);

        expect(deleteTask).toHaveBeenCalledWith('1'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω—É–∂–Ω—ã–º ID
    });

    it('–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', async () => {
        const { editTask } = require('@/store/task/taskStore.ts').useTaskStore();

        render(TaskList);

        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = screen.getByText('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
        await fireEvent.click(editButton);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        const nameInput = screen.getByDisplayValue('Test Task');
        await fireEvent.update(nameInput, 'Updated Task');

        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveButton = screen.getByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');
        await fireEvent.click(saveButton);

        expect(editTask).toHaveBeenCalledWith(
            { id: '1', name: 'Updated Task', text: 'Description', employee: 'User 1', status: 'In Progress', edit: true },
            expect.anything()
        );
    });
});
